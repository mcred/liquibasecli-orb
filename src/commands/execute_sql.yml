# execute_sql.yml
# Code generated by protoc-gen-liquibasecli-orb. DO NOT EDIT.
description: >
  Execute a SQL string or file
parameters:
  defaultCatalogName:
    type: string
    description: 'The default catalog name to use for the database connection'
  defaultSchemaName:
    type: string
    description: 'The default schema name to use for the database connection'
  delimiter:
    type: string
    description: 'Delimiter to use when executing SQL script'
  driver:
    type: string
    description: 'The JDBC driver class'
  driverPropertiesFile:
    type: string
    description: 'The JDBC driver properties file'
  password:
    type: string
    description: 'Password to use to connect to the database'
  sql:
    type: string
    description: 'SQL string to execute'
  sqlFile:
    type: string
    description: 'SQL script to execute'
  url:
    type: string
    description: '*required* The JDBC database connection URL'
  username:
    type: string
    description: 'Username to use to connect to the database'
  alwaysOverrideStoredLogicSchema:
    type: bool
    description: 'When generating SQL for createProcedure, should the procedure schema be forced to the default schema if no schemaName attribute is set?'
  autoReorg:
    type: bool
    description: 'Should Liquibase automatically include REORG TABLE commands when needed?'
  changelogLockPollRate:
    type: string
    description: 'Number of seconds wait between checks to the changelog lock when it is locked'
  changelogLockWaitTimeInMinutes:
    type: string
    description: 'Number of minutes to wait for the changelog lock to be available before giving up'
  changelogParseMode:
    type: string
    description: 'Configures how to handle unknown fields in changelog files. Possible values: STRICT which causes parsing to fail, and LAX which continues with the parsing.'
  classpath:
    type: string
    description: 'Additional classpath entries to use'
  convertDataTypes:
    type: bool
    description: 'Should Liquibase convert to/from STANDARD data types. Applies to both snapshot and update commands.'
  databaseChangelogLockTableName:
    type: string
    description: 'Name of table to use for tracking concurrent Liquibase usage'
  databaseChangelogTableName:
    type: string
    description: 'Name of table to use for tracking change history'
  databaseClass:
    type: string
    description: 'Class to use for Database implementation'
  ddlLockTimeout:
    type: int32
    description: 'The DDL_LOCK_TIMEOUT parameter indicates the number of seconds a DDL command should wait for the locks to become available before throwing the resource busy error message. This applies only to Oracle databases.'
  defaultloggerLevel:
    type: string
    description: 'Logging level'
  defaultsFile:
    type: string
    description: 'File with default Liquibase properties'
  diffColumnOrder:
    type: bool
    description: 'Should Liquibase compare column order in diff operation?'
  duplicateFileMode:
    type: string
    description: 'How to handle multiple files being found in the search path that have duplicate paths. Options are WARN (log warning and choose one at random) or ERROR (fail current operation)'
  fileEncoding:
    type: string
    description: 'Encoding to use when reading files. Valid values include: UTF-8, UTF-16, UTF-16BE, UTF-16LE, US-ASCII, or OS to use the system configured encoding.'
  filterLogMessages:
    type: bool
    description: 'DEPRECATED: No longer used'
  generateChangesetCreatedValues:
    type: bool
    description: 'Should Liquibase include a "created" attribute in diff/generateChangelog changesets with the current datetime'
  generatedChangesetIdsContainsDescription:
    type: bool
    description: 'Should Liquibase include the change description in the id when generating changesets?'
  headless:
    type: bool
    description: 'Force liquibase to think it has no access to a keyboard'
  hubApiKey:
    type: string
    description: 'Liquibase Hub API key for operations'
  hubLogLevel:
    type: string
    description: 'Log level for filtering log messages to send to Liquibase Hub during operations. Values can be any acceptable log level.'
  hubMode:
    type: string
    description: 'Content to send to Liquibase Hub during operations. Values can be "all", "meta", or "off"'
  hubUrl:
    type: string
    description: 'Liquibase Hub URL for operations'
  includeCatalogInSpecification:
    type: bool
    description: 'Should Liquibase include the catalog name when determining equality?'
  includeSystemClasspath:
    type: bool
    description: 'Include the system classpath when resolving classes at runtime'
  licenseKey:
    type: string
    description: 'Liquibase Pro or Liquibase Labs license key used to unlock paid capabilities. Get a free trial at https://liquibase.com/trial and use in CLI or add liquibase.licenseKey=<yourKey> into your defaults file.'
  liquibaseCatalogName:
    type: string
    description: 'Catalog to use for Liquibase objects'
  liquibaseSchemaName:
    type: string
    description: 'Schema to use for Liquibase objects'
  liquibaseTablespaceName:
    type: string
    description: 'Tablespace to use for Liquibase objects'
  logChannels:
    type: string
    description: 'Controls which log channels have their level set by the liquibase.logLevel setting. Comma separate multiple values. To set the level of all channels, use "all". Example: liquibase,org.mariadb.jdbc'
  logFile:
    type: string
    description: ''
  logLevel:
    type: string
    description: 'Controls which logs get set to stderr AND to any log file. The CLI defaults, if log file set, to SEVERE. Others vary by integration. The official log levels are: OFF, SEVERE, WARNING, INFO, FINE'
  missingPropertyMode:
    type: string
    description: 'How to handle changelog property expressions where a value is not set. For example, a string "${address}" when no "address" property was defined. Values can be: "preserve" which leaves the string as-is, "empty" which replaces it with an empty string, or "error" which stops processing with an error.'
  monitorPerformance:
    type: string
    description: 'Enable performance tracking. Set to "false" to disable. If set to "true", data is stored to a `liquibase-TIMESTAMP.jfr` file in your working directory. Any other value will enable tracking and be used as the name of the file to write the data to.'
  nativeExecutor:
    type: string
    description: 'Custom executor that can specified'
  outputFile:
    type: string
    description: ''
  outputFileEncoding:
    type: string
    description: 'Encoding to use when writing files'
  outputLineSeparator:
    type: string
    description: 'Line separator for output'
  preserveSchemaCase:
    type: bool
    description: 'Should liquibase treat schema and catalog names as case sensitive?'
  proLicenseKey:
    type: string
    description: 'DEPRECATED: Liquibase Pro license key used to unlock paid capabilities. Get a free trial at https://www.liquibase.com/protrial and use in CLI or add liquibase.pro.licenseKey=<yourKey> into your defaults file.'
  proMarkUnusedNotDrop:
    type: bool
    description: 'If a column would be dropped in a diffChangeLog, call markUnused instead if set to true'
  proSqlInline:
    type: bool
    description: 'If true, generate changeSets with SQL-based changes inlined instead of saving them to an external file'
  proSynonymsDropPublic:
    type: bool
    description: 'If false, do not drop public synonyms in diffChangeLog/dropAll'
  promptForNonLocalDatabase:
    type: bool
    description: 'Should Liquibase prompt if a non-local database is being accessed'
  propertyProviderClass:
    type: string
    description: 'Implementation of Properties class to provide additional driver properties'
  searchPath:
    type: string
    description: 'Complete list of Location(s) to search for files such as changelog files in. Multiple paths can be specified by separating them with commas.'
  secureParsing:
    type: bool
    description: 'If true, remove functionality from file parsers which could be used insecurely. Examples include (but not limited to) disabling remote XML entity support.'
  shouldRun:
    type: bool
    description: 'Should Liquibase commands execute'
  shouldSnapshotData:
    type: bool
    description: 'Should Liquibase snapshot data by default?'
  showBanner:
    type: bool
    description: 'If true, show a Liquibase banner on startup.'
  sqlLogLevel:
    type: string
    description: 'Level to log SQL statements to'
  strict:
    type: bool
    description: 'Be stricter on allowed Liquibase configuration and setup?'
  supportPropertyEscaping:
    type: bool
    description: 'Support escaping changelog parameters using a colon. Example: ${:user.name}'
  useProcedureSchema:
    type: bool
    description: 'If set to true (default value), createProcedure tags with a set schemaName will modify the procedure body with the given schema name.'
steps:
  - run:
    environment:
      DEFAULTCATALOGNAME: <<parameters.defaultCatalogName>>
      DEFAULTSCHEMANAME: <<parameters.defaultSchemaName>>
      DELIMITER: <<parameters.delimiter>>
      DRIVER: <<parameters.driver>>
      DRIVERPROPERTIESFILE: <<parameters.driverPropertiesFile>>
      PASSWORD: <<parameters.password>>
      SQL: <<parameters.sql>>
      SQLFILE: <<parameters.sqlFile>>
      URL: <<parameters.url>>
      USERNAME: <<parameters.username>>
      ALWAYSOVERRIDESTOREDLOGICSCHEMA: <<parameters.alwaysOverrideStoredLogicSchema>>
      AUTOREORG: <<parameters.autoReorg>>
      CHANGELOGLOCKPOLLRATE: <<parameters.changelogLockPollRate>>
      CHANGELOGLOCKWAITTIMEINMINUTES: <<parameters.changelogLockWaitTimeInMinutes>>
      CHANGELOGPARSEMODE: <<parameters.changelogParseMode>>
      CLASSPATH: <<parameters.classpath>>
      CONVERTDATATYPES: <<parameters.convertDataTypes>>
      DATABASECHANGELOGLOCKTABLENAME: <<parameters.databaseChangelogLockTableName>>
      DATABASECHANGELOGTABLENAME: <<parameters.databaseChangelogTableName>>
      DATABASECLASS: <<parameters.databaseClass>>
      DDLLOCKTIMEOUT: <<parameters.ddlLockTimeout>>
      DEFAULTLOGGERLEVEL: <<parameters.defaultloggerLevel>>
      DEFAULTSFILE: <<parameters.defaultsFile>>
      DIFFCOLUMNORDER: <<parameters.diffColumnOrder>>
      DUPLICATEFILEMODE: <<parameters.duplicateFileMode>>
      FILEENCODING: <<parameters.fileEncoding>>
      FILTERLOGMESSAGES: <<parameters.filterLogMessages>>
      GENERATECHANGESETCREATEDVALUES: <<parameters.generateChangesetCreatedValues>>
      GENERATEDCHANGESETIDSCONTAINSDESCRIPTION: <<parameters.generatedChangesetIdsContainsDescription>>
      HEADLESS: <<parameters.headless>>
      HUBAPIKEY: <<parameters.hubApiKey>>
      HUBLOGLEVEL: <<parameters.hubLogLevel>>
      HUBMODE: <<parameters.hubMode>>
      HUBURL: <<parameters.hubUrl>>
      INCLUDECATALOGINSPECIFICATION: <<parameters.includeCatalogInSpecification>>
      INCLUDESYSTEMCLASSPATH: <<parameters.includeSystemClasspath>>
      LICENSEKEY: <<parameters.licenseKey>>
      LIQUIBASECATALOGNAME: <<parameters.liquibaseCatalogName>>
      LIQUIBASESCHEMANAME: <<parameters.liquibaseSchemaName>>
      LIQUIBASETABLESPACENAME: <<parameters.liquibaseTablespaceName>>
      LOGCHANNELS: <<parameters.logChannels>>
      LOGFILE: <<parameters.logFile>>
      LOGLEVEL: <<parameters.logLevel>>
      MISSINGPROPERTYMODE: <<parameters.missingPropertyMode>>
      MONITORPERFORMANCE: <<parameters.monitorPerformance>>
      NATIVEEXECUTOR: <<parameters.nativeExecutor>>
      OUTPUTFILE: <<parameters.outputFile>>
      OUTPUTFILEENCODING: <<parameters.outputFileEncoding>>
      OUTPUTLINESEPARATOR: <<parameters.outputLineSeparator>>
      PRESERVESCHEMACASE: <<parameters.preserveSchemaCase>>
      PROLICENSEKEY: <<parameters.proLicenseKey>>
      PROMARKUNUSEDNOTDROP: <<parameters.proMarkUnusedNotDrop>>
      PROSQLINLINE: <<parameters.proSqlInline>>
      PROSYNONYMSDROPPUBLIC: <<parameters.proSynonymsDropPublic>>
      PROMPTFORNONLOCALDATABASE: <<parameters.promptForNonLocalDatabase>>
      PROPERTYPROVIDERCLASS: <<parameters.propertyProviderClass>>
      SEARCHPATH: <<parameters.searchPath>>
      SECUREPARSING: <<parameters.secureParsing>>
      SHOULDRUN: <<parameters.shouldRun>>
      SHOULDSNAPSHOTDATA: <<parameters.shouldSnapshotData>>
      SHOWBANNER: <<parameters.showBanner>>
      SQLLOGLEVEL: <<parameters.sqlLogLevel>>
      STRICT: <<parameters.strict>>
      SUPPORTPROPERTYESCAPING: <<parameters.supportPropertyEscaping>>
      USEPROCEDURESCHEMA: <<parameters.useProcedureSchema>>
    name: Liquibase Execute Sql
    command: <<include(scripts/execute_sql.sh)>>
